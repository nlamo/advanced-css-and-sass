/* Basic reset */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* CSS best practice */
}

html {
  font-size: 62.5%;
  /* ,625 * 16 == 10... good to have root font-size in base 10, but expressed as a fraction to accommodate other browser defaults*/
}

body {
  box-sizing: border-box;
  /* borders/padding no longer added to total width/height */
}

/* animation comes in from the left */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    transform: translatex(1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
/* animation comes in from the right */
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translatex(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
/* animaton comes in from the bottom */
@keyframes moveInFromBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
/* Best practice is to specific anything related to fony in the 'body' element */
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  /* padding does not get inherited */
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* little hack to fix animation shake if it occurs */
  margin-bottom: 6rem;
  /* <span> is inline by default, and block is better for these particular elements */
}
.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 700;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-timing-function: ease-out;
  animation-duration: 1.5s;
}
.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 400;
  letter-spacing: 1.75rem;
  animation: moveInRight ease-out 1.5s;
}

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all 0.2s;
}
.heading-secondary:hover {
  transform: skewY(2deg) skewX(15deg) scale(1.1);
  text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
}

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase;
}

.paragraph {
  font-size: 1.6rem;
}
.paragraph:not(:last-child) {
  margin-bottom: 3rem;
}

.u-center-text {
  text-align: center;
}

.u-margin-bottom-small {
  margin-bottom: 1.5rem;
}

.u-margin-bottom-medium {
  margin-bottom: 4rem;
}

.u-margin-bottom-big {
  margin-bottom: 8rem;
}

.btn {
  /* after pseudo-element is actualy the last child of &
   * which is why we can set height/width to 100%  
   */
  /* this decouples the animation from the button it operates upon, which is good;
   * originally I had set the animation directly to &-white'
   */
}
.btn:link, .btn:visited {
  display: inline-block;
  position: relative;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  border-radius: 10rem;
  font-size: 1.6rem;
  transition: all 0.2s;
  /* transition property must be on initial state */
}
.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0rem 1rem 2rem rgba(0, 0, 0, 0.2);
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}
.btn--white {
  background-color: #fff;
  color: #777;
}
.btn--white::after {
  background-color: #fff;
}
.btn::after {
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 20rem;
  transition: all 0.4s;
}
.btn--animated {
  animation: moveInFromBottom 0.5s ease-out 0.8s;
  animation-fill-mode: backwards;
  /* applies values from first relevant keyframe during delay */
}

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 0.5rem 1rem;
  transition: all 0.2s;
}
.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
}
.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0);
}

.composition {
  position: relative;
}
.composition__photo {
  width: 55%;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
  border-radius: 2px;
  position: absolute;
  z-index: 10;
  transition: all 0.2s;
  outline-offset: 2rem;
  outline-style: double;
}
.composition__photo--p1 {
  left: 0;
  top: -2rem;
}
.composition__photo--p2 {
  right: 0;
  top: 2rem;
}
.composition__photo--p3 {
  left: 20%;
  top: 10rem;
}
.composition__photo:hover {
  outline: 1.5rem solid #55c57a;
  transform: scale(1.05) translateY(-0.5rem);
  box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
  z-index: 20;
}
.composition:hover .composition__photo:not(:hover) {
  transform: scale(0.9);
}

.header {
  position: relative;
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  background-size: cover;
  /* scales img to provide full coverage while preserving asp ratio */
  background-position: top;
  /* keeps the top constant as the viewport changes */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* a polygon for which everything outside the coverage is clipped out */
  /* Reference is the parent element that has its position set to 'relative' */
  /* Interesting trick for positioning with position: absolute and transform: translate() */
}
.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}
.header__logo {
  height: 3.5rem;
}
.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* repositions the element */
  text-align: center;
}

.row {
  max-width: 114rem;
  margin: 0 auto;
}
.row:not(:last-child) {
  margin-bottom: 8rem;
}
.row::after {
  content: "";
  display: table;
  clear: both;
}
.row [class^=col-] {
  float: left;
}
.row [class^=col-]:not(:last-child) {
  margin-right: 6rem;
}
.row .col-1-of-2 {
  width: calc((100% - 6rem) / 2);
}
.row .col-1-of-3 {
  width: calc((100% - 12rem) / 3);
}
.row .col-1-of-4 {
  width: calc((100% - 18rem) / 4);
}
.row .col-2-of-3 {
  width: calc(2 * ((100% - 12rem) / 3) + 6rem);
}
.row .col-2-of-4 {
  width: calc(2 * ((100% - 18rem) / 4) + 6rem);
}
.row .col-3-of-4 {
  width: calc(3 * (100% - 18rem) / 4 + (12rem));
}

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
}

/*# sourceMappingURL=style.css.map */
